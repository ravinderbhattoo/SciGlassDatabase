var documenterSearchIndex = {"docs":
[{"location":"toc.html#Table-of-contents","page":"Table of contents","title":"Table of contents","text":"","category":"section"},{"location":"toc.html","page":"Table of contents","title":"Table of contents","text":"Pages = [\n            \"install.md\",\n            \"examples.md\",\n            \"index.md\",\n        ]\nDepth = 3","category":"page"},{"location":"sciglassdatabase.html#SciGlassDatabase.jl","page":"Home","title":"SciGlassDatabase.jl","text":"","category":"section"},{"location":"sciglassdatabase.html","page":"Home","title":"Home","text":"A Julia package for extracting data from SciGlass dataset.","category":"page"},{"location":"sciglassdatabase.html#What-is-SciGlass-dataset?","page":"Home","title":"What is SciGlass dataset?","text":"","category":"section"},{"location":"sciglassdatabase.html","page":"Home","title":"Home","text":"SciGlass is the world's most extensive database dedicated to glass properties, housing information on nearly 400,000 unique compositions and thousands of experimental data points curated from scientific literature. This huge data resource is an invaluable asset for researchers and engineers in the field of glass science and technology. The raw dataset is hosted at https://github.com/epam/SciGlass.","category":"page"},{"location":"sciglassdatabase.html","page":"Home","title":"Home","text":"Verbatim from https://github.com/epam/SciGlass","category":"page"},{"location":"sciglassdatabase.html","page":"Home","title":"Home","text":"SciGlassThe largest glass property database contains data for more than 420 thousand glass compositions including more than 18 thousand halide and about 38 thousand chalcogenide glasses. It provides also property predictions and calculations, help you solve R&D problems.FeaturesGlass Properties. Practically all broadly used physical and chemical properties of glasses and glass-forming melts with concise but informative description of syntheses and measurement procedures.\nGlasses. 422,000 glasses and melts, including more than 268,000 oxide glasses and melts, 18,500 halide and 38,500 chalcogenide glasses. The data were taken from more than 40,000 literature sources including more than 19,700 patents.\nProperty Calculations. Over 100 computational methods to compute the properties in 15 groups (e.g., viscosity, density, mechanical, optical), many of them in broad temperature ranges. Prediction of properties of oxide, halide, and chalcogenide glasses is possible in wide concentration ranges.\nTernary Diagrams of Glass Formation. More than 3,800 ternary diagrams of glass formation.\nOptical Spectra. More than 15,000 optical spectra (from UV to near IR) for glasses and melts with 96 different ways to represent spectra.\nTernary Property Diagram.Automatically generate isoproperty lines versus composition and compare calculated and experimental property values for ternary compositions.\nStatistical Analysis. Find best computational method from least squares fit of calculated and experimental values to insure best method can be applied to your glass composition.\nPatent and Trademark Index. Over 19,000 international patents and 1,000 trademarks; complete information on usage, country, company, composition, property table, author, and TM symbol.\nSubject Index. Explore hundreds of specialized subjects (e.g., diffusion of specific gases & ions), which are difficult to find by other ways.\nChemical Durability of Glasses. Pertinent data on about 35,000 glasses as well as access to a large compendium on standard durability testing methods.\nOptimization of Glass Compositions. Find the most perspective glass compositions meeting a complex of requirements on specific values of their properties","category":"page"},{"location":"examples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples.html#Example-1:-Exploring-Glass-Properties-with-SciGlassDatabase-in-Julia","page":"Examples","title":"Example 1: Exploring Glass Properties with SciGlassDatabase in Julia","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This example will guide you through using the SciGlassDatabase package in Julia to retrieve, visualize, and explore property data for glass compositions. Prerequisites:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Julia Installation: Ensure you have Julia installed on your system. You can download it from the official Julia website (https://julialang.org/downloads/).\nPkg Package: Julia's built-in package manager (Pkg) should be available.\nSciGlassDatabase Package: You need to install the SciGlassDatabase package. Open your Julia REPL (the interactive command-line interface) and run the following commands:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using Pkg\nPkg.add(url=\"https://github.com/ravinderbhattoo/SciGlassDatabase.git\")\n\n# You might also need a plotting package for visualization and other packages\nPkg.add(\"Plots\")","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 1: Setting up the Environment and Loading the Package","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Load the SciGlassDatabase Package: In your Julia REPL or script, load the SciGlassDatabase package:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using SciGlassDatabase","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Load Essential Data: Some packages might require an initial setup step. The SciGlassDatabase package in your example uses load_essentials() for loading data tables from SciGlass dataset:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"load_essentials()","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Run this command to ensure the necessary data structures or connections are initialized. For first time, it will download artifacts from github and require internet connection. Note that not all tables are loaded which can be done using load_all_tables!.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 2: Specifying the Glass Composition System","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Define the components of the glass system you are interested in. In this example, it's a ternary system of Silicon Dioxide (SiO2), Sodium Oxide (Na2O), and Magnesium Oxide (MgO):","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"comps = \"SiO2-Na2O-MgO\"","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The components are specified as a hyphen-separated string.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 3: Retrieving Composition Data for a Specific Property","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Use the get_compositions function to retrieve data. Here, we are fetching data for the \"Density\" property for the specified comps glass:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"df = get_compositions(;property=[\"Density\"], composition=comps)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"property=[\"Density\"] tells the function to retrieve data related to the \"Density\" property. You can provide a list of properties if you want to retrieve data for multiple properties (e.g., property=[\"Density\", \"Viscosity\"]).\ncomposition=comps specifies the glass system we are interested in.\nThe result is stored in a variable named df. This variable will hold a DataFrame object, which is a tabular data structure commonly used in Julia for data manipulation and analysis.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 4: Displaying the Retrieved Data as a Table","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"To get a quick look at the retrieved data, you can use the show_table() function:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"show_table(df)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This will display the contents of the df DataFrame in a readable table format and utilizes Dash to show the table (follow the link shown on terminal), showing the compositions (as mol percentages of each component) and their corresponding Density values.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"show_table(df; with_plot=true)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"If keyword argument \"with_plot\" is true, it will show table with plot capabilities.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"(Image: table)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 5: Creating a Scatter Plot of Property vs. Composition","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The scatterplot_table function allows you to visualize the relationship between a specific component's proportion and a property. Here, we plot the mole percentage of SiO2 against the Density:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"scatterplot_table(df, :SIO2, :DENSITY)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":":SIO2 and :DENSITY are symbols representing the column names in your df DataFrame. Make sure these column names exist in your retrieved data. This command will generate a scatter plot where the x-axis represents the amount of SiO2 and the y-axis represents the Density. You might need to have a plotting backend loaded (like Plots with pyplot() or gr()) for the plot to be displayed.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"(Image: scatter)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 6: Generating a Ternary Plot for Three-Component Glasses","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"For visualizing properties in a three-component system, you can use the scatterTernary function:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"scatterTernary(comps; property=\"DENSITY\")","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"comps again specifies the three components of the system.\nproperty=\"DENSITY\" indicates that the Density values should be visualized on the ternary diagram. The plot will show points representing different compositions within the SiO2-Na2O-MgO system, and the color of these points will correspond to the Density values.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"(Image: ternary)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 7: Retrieving Data with Metadata","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"To get additional information (metadata) associated with the data points, you can use the with_metadata=true keyword argument in the get_compositions function:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"df = get_compositions(;property=[\"Density\"], composition=comps, with_metadata=true)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The df DataFrame will now include extra columns containing metadata, such as the source of the data (e.g., publication details), experimental conditions, or other relevant information available in the SciGlass database. You can then explore this metadata using standard DataFrame operations.","category":"page"},{"location":"examples.html#Example-2:-Predicting-Glass-Density-using-Machine-Learning-with-Flux-package","page":"Examples","title":"Example 2: Predicting Glass Density using Machine Learning with Flux package","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This example demonstrates how to use the data retrieved from the SciGlassDatabase to train a simple neural network using the Flux.jl machine learning library in Julia. We will predict the density of SiO2-Na2O-MgO glasses based on their composition.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Prerequisites:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Completion of Example 1: Ensure you have successfully installed and loaded the SciGlassDatabase package and its dependencies as outlined in Example 1.\nFlux.jl: Install the Flux.jl package for machine learning:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using Pkg\nPkg.add(\"Flux\")","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Plots.jl: Ensure you have a plotting backend installed (as mentioned in Example 1) as we will visualize the loss during training. If you haven't already:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using Pkg\nPkg.add(\"Plots\")","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Statistics.jl: This is a base Julia package but we explicitly load it for the mean and std functions.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 1: Load Necessary Packages and Retrieve Data","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Load the required packages:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using SciGlassDatabase\nusing Flux\nusing Flux: train!\nusing Plots\nusing Statistics","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Load essential data from SciGlassDatabase:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"load_essentials()","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Specify the glass composition system and retrieve the density data:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"comps = \"SiO2-Na2O-MgO\"\ndf = get_compositions(;property=[\"Density\"], composition=comps)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 2: Prepare Data for Machine Learning","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Extract the density values (our target variable, y) and the composition features (our input features, x). We convert them to Float32 for compatibility with Flux and reshape them into column vectors:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"y = Float32.(df.DENSITY')\nx = Float32.(hcat(df.SIO2, df.NA2O, df.MGO)')","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"df.DENSITY' transposes the 'DENSITY' column into a row vector.\nhcat(df.SIO2, df.NA2O, df.MGO) horizontally concatenates the 'SIO2', 'NA2O', and 'MGO' columns into a matrix where each row represents a glass composition. The transpose ' then makes each composition a column vector, which is the expected input format for our model.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Normalize the data: Normalizing the input features and the target variable can often improve the training process and the model's performance:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"normalize(x) = (x .- mean(x)) ./ std(x)\n\nx = normalize(x)\ny = normalize(y)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The normalize function subtracts the mean and divides by the standard deviation for each feature and the target variable.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 3: Define the Neural Network Model","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"We define a simple feedforward neural network using Flux.Chain:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"model = Chain(\n    Dense(3, 10),  # Input layer with 3 features (SiO2, Na2O, MgO) to 10 neurons\n    Dense(10, 10), # Hidden layer with 10 neurons to 10 neurons\n    Dense(10, 1)   # Output layer with 10 neurons to 1 output (predicted density)\n)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This model has three dense layers: an input layer, one hidden layer, and an output layer.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Get the parameters of the model using Flux.params():","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"ps = Flux.params(model)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 4: Define the Loss Function","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"We use the Mean Squared Error (MSE) as our loss function, which measures the average squared difference between the model's predictions and the actual density values:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"loss(model, x, y) = Flux.Losses.mse(model(x), y)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 5: Choose an Optimizer","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"We select the Adam optimizer, a common and effective optimization algorithm:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"opt = Adam()\nopt_state = Flux.setup(opt, model)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Flux.setup(opt, model) initializes the optimizer's state based on the model's parameters.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 6: Train the Model","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Compute the initial loss before training:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"loss_0 = loss(model, x, y)\nprintln(\"Initial loss: $loss_0\")","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Prepare the training data as an array of tuples (x, y):","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"data = [(x, y)]","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Set the number of training epochs:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"n_epochs = 1000","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Initialize an array to store the loss values at each epoch for visualization:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"loss_values = zeros(n_epochs)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Train the model for the specified number of epochs:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"for epoch in 1:n_epochs\n    train!(loss, model, data, opt_state)\n    loss_values[epoch] = loss(model, x, y)\n    if epoch % 10 == 0\n        println(\"Epoch: $epoch, loss: \", loss_values[epoch])\n    end\nend","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"The train! function performs one optimization step using the provided loss function, model parameters, data, and optimizer state.\nWe record the loss at each epoch and print the loss every 10 epochs to monitor the training progress.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Step 7: Visualize the Training Loss","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Plot the loss values over the epochs to see how the model is learning:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Plots.plot(loss_values, label=nothing)\nxlabel!(\"Epochs\")\nylabel!(\"Loss\")","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This plot should show a decreasing trend in the loss as the model learns to predict the density more accurately.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"(Image: loss)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"This example provides a basic introduction to using machine learning with data from the SciGlassDatabase. By building upon this foundation, you can explore more complex models and analyses to gain deeper insights into the relationships between glass composition and properties.","category":"page"},{"location":"examples.html#**Further-Exploration:**","page":"Examples","title":"Further Exploration:","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"These examples covered the basics of retrieving and visualizing data using SciGlassDatabase. You can further explore the package's capabilities by:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Querying for different properties: Experiment with different property names in the property argument of get_compositions.\nExploring different composition systems: Change the comps variable to investigate other glass systems.\nUsing different visualization functions: The SciGlassDatabase package or related visualization packages might offer other types of plots and data exploration tools.\nFiltering and analyzing the DataFrame: Use the functionalities of the DataFrames.jl package to filter, sort, and analyze the retrieved data.","category":"page"},{"location":"install.html#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install.html","page":"Installation","title":"Installation","text":"Directly install package from github.","category":"page"},{"location":"install.html","page":"Installation","title":"Installation","text":"add https://github.com/ravinderbhattoo/SciGlassDatabase.git","category":"page"},{"location":"index.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"","category":"page"},{"location":"autodocs.html#SciGlassDatabase.SciGlassDatabase","page":"Autodocs","title":"SciGlassDatabase.SciGlassDatabase","text":"A Julia package for extracting data from SciGlass database.\n\nVerbatim from https://github.com/epam/SciGlass\n\nSciGlass\n\nThe largest glass property database contains data for more than 420 thousand glass compositions including more than 18 thousand halide and about 38 thousand chalcogenide glasses. It provides also property predictions and calculations, help you solve R&D problems.\n\nFeatures\n\nGlass Properties. Practically all broadly used physical and chemical properties of glasses and glass-forming melts with concise but informative description of syntheses and measurement procedures.\nGlasses. 422,000 glasses and melts, including more than 268,000 oxide glasses and melts, 18,500 halide and 38,500 chalcogenide glasses. The data were taken from more than 40,000 literature sources including more than 19,700 patents.\nProperty Calculations. Over 100 computational methods to compute the properties in 15 groups (e.g., viscosity, density, mechanical, optical), many of them in broad temperature ranges. Prediction of properties of oxide, halide, and chalcogenide glasses is possible in wide concentration ranges.\nTernary Diagrams of Glass Formation. More than 3,800 ternary diagrams of glass formation.\nOptical Spectra. More than 15,000 optical spectra (from UV to near IR) for glasses and melts with 96 different ways to represent spectra.\nTernary Property Diagram.Automatically generate isoproperty lines versus composition and compare calculated and experimental property values for ternary compositions.\nStatistical Analysis. Find best computational method from least squares fit of calculated and experimental values to insure best method can be applied to your glass composition.\nPatent and Trademark Index. Over 19,000 international patents and 1,000 trademarks; complete information on usage, country, company, composition, property table, author, and TM symbol.\nSubject Index. Explore hundreds of specialized subjects (e.g., diffusion of specific gases & ions), which are difficult to find by other ways.\nChemical Durability of Glasses. Pertinent data on about 35,000 glasses as well as access to a large compendium on standard durability testing methods.\nOptimization of Glass Compositions. Find the most perspective glass compositions meeting a complex of requirements on specific values of their properties\n\n\n\n\n\n","category":"module"},{"location":"autodocs.html#SciGlassDatabase.Property","page":"Autodocs","title":"SciGlassDatabase.Property","text":"Property holds all the table in Property.mdb database file.\n\nList of tables:\n\nATOMS\nCalcListProp\nIDF\nLegends\nSYMBOL\ntblpar\nCalcAtoms\nDT\nJournal\nPConvert\nSort_Comp\nCalcComp\nDT2\nLISTPROP\nPropList\nUNITS\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#SciGlassDatabase.Select","page":"Autodocs","title":"SciGlassDatabase.Select","text":"Select holds all the table in Select.mdb database file.\n\nList of tables:\n\nAuthors\nGF_add\nMaxGno\nReference\nSpectralParam\nWtPc\nAtMol\nContries\nGcomp\nMolPc\nSciGK\nSubjectIndex\nAtWt\nGF\nKod2Ref\nPatents\nSpectr\nTrademark\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#SciGlassDatabase.clean_df!-Tuple{Any, Any}","page":"Autodocs","title":"SciGlassDatabase.clean_df!","text":"clean_df!(df, item::Symbol)\n\nCleans and preprocesses a DataFrame loaded from the SciGlass database. This function applies specific cleaning rules based on the type of table being processed.\n\nArguments\n\ndf: A DataFrame object representing the data to be cleaned.\nitem: A Symbol representing the name of the table in the database (e.g., :SciGK).\n\nDescription\n\nThe clean_df! function modifies the input DataFrame in place, applying transformations such as renaming columns or handling inconsistencies. Each table type may have its own cleaning rules, which are determined by the item argument.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.eachtable-Tuple{Union{SciGlassDatabase.Property, SciGlassDatabase.Select}}","page":"Autodocs","title":"SciGlassDatabase.eachtable","text":"eachtable(tables::Union{Property, Select})\n\nGenerate iterator over tables in Union{Property, Select}.\n\nArguments\n\ntables: A collection of tables. Each table should be iterable and have a names function that returns its column names.\n\nExample\n\nfor (name, table) in eachtable(SELECT)\n    # some code\nend\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.get_components_from_composition-Tuple{Any}","page":"Autodocs","title":"SciGlassDatabase.get_components_from_composition","text":"get_components_from_composition(x; molp=true)\n\nReturn list of components with data.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.get_composition_from_glass_number-Tuple{Any}","page":"Autodocs","title":"SciGlassDatabase.get_composition_from_glass_number","text":"get_composition_from_glass_number(glassno; composition=\"SiO2\", molp=true, inner=true)\n\nReturn mask if components present in glass numbers and glass compositions from glass numbers.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.get_compositions-Tuple{}","page":"Autodocs","title":"SciGlassDatabase.get_compositions","text":"get_compositions(;property=[\"DENSITY\", \"TLiq\"], composition=\"SiO2-K2O\", prop_inner=true, comp_inner=true,\n    clean=true, molp=true, with_metadata=false)\n\nReturn a DataFrame with glass compositions and their properties.\n\nArguments\n\nproperty=[\"DENSITY\"]: List of properties to be extracted.\ncomposition=\"SiO2-K2O\": Glass compositions.\nprop_inner=true: If true takes intersection of data for multiple properties, otherwise union.\ncomp_inner=true: If true takes intersection of data for multiple components, otherwise union.\nclean=true\": If true, clean the DataFrame before returning (extra columns removed).\nmolp=true: If true, compositions are in mol%, otherwise weight%.\nwith_metadata=false: If true, give metadata for each composition (Authors, Year, Journal etc.).\n\nReturns\n\nDataFrame: DataFrame with glass compositions and their properties.\n\nDataFrame contains the following columns:\n\nGLASNO: Glass number.\nproperty: Property values.\ncomposition: Composition values.\nExample\n\nget_compositions(;property=[\"DENSITY\", \"TLiq\"], composition=\"SiO2-Na2O\")\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.get_molar_wt-Tuple{Any}","page":"Autodocs","title":"SciGlassDatabase.get_molar_wt","text":"get_molar_wt(comps_list)\n\nReturn molar weight from component list.\n\nArguments\n\ncomps_list: List of glass components\n\nReturns\n\n'list': List of molar weight for each component\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.list_metadata-Tuple{}","page":"Autodocs","title":"SciGlassDatabase.list_metadata","text":"list_metadata()\n\nReturn vector of subset of metadata headers for a glass compositions.\n\nReturns\n\nlist: List of metadata headers.\n\nList of metadata:\n\nAuthor, Year, GlassClass, Analysis, PropCode, GForm, any_n, Trademark, QComp, QComp2, Flag\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.list_properties-Tuple{}","page":"Autodocs","title":"SciGlassDatabase.list_properties","text":"list_properties()\n\nReturn property names as vector that can be extracted using get_compositions.\n\nReturns\n\nlist: List of property names.\n\nList of properties:\n\nT1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, V500, V600, V700, V800, V900, V1000, V1100, V1200, V1300, V1400, V1500, V1600, V1800, V2000, V2200, TG, LPT, ANPT, SPT, Tsoft, RO150, RO300, RO20, RO100, TK100C, TEC55, TEC100, TEC160, TEC210, TEC350, ANYTEC, DENSITY, spvm, ND300, nd300low, nd300hi, DNFC300, NUD300, RTSH180, MODUNG, MODSDV, MIKROTV, EPS730, TGD730, ro800, ro1000, ro1200, ro1400, Tm, TLiq, SUT900, SUT1200, SUT1300, SUT1400, anysut, cond220, pois, cp20, cp200, cp400, cp800, cp1000, cp1200, cp1400, dens800, dens1000, dens1200, dens1400, Tmax, Vmax, Tn, Io, tcr, tx\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.load_all_tables!-Tuple{Any}","page":"Autodocs","title":"SciGlassDatabase.load_all_tables!","text":"load_all_tables!(tables; force=false)\n\nLoad all tables in the given collection of tables. If force is set to true, it will reload the tables even if they are already loaded.\n\nArguments\n\ntables: A collection of tables. Each table should be iterable and have a names function that returns its column names.\n\nKeyword Arguments\n\nforce: A boolean flag indicating whether to force reload the tables. Default is false.\n\nSee also reload_table!, load_table!, load_all_tables!.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.load_table!-Tuple{Any, Union{String, Symbol}}","page":"Autodocs","title":"SciGlassDatabase.load_table!","text":"load_table!(table, item::Union{Symbol, String})\n\nSet table field with DataFrame from filepath. Skip loading if DataFrame already exists, use reload_table! for force reloading of table. If the filepath is a string, it will be joined with the artifact path.\n\nArguments\n\ntable: A collection of tables. Each table should be iterable and have a names function that returns its column names.\nitem: The name of the table to load. It can be a Symbol or String.\n\nExample\n\nload_table!(SELECT, \"AtMol\")\n\nSee also reload_table!, load_table!, load_all_tables!.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.print_all_headers!-Tuple{Any}","page":"Autodocs","title":"SciGlassDatabase.print_all_headers!","text":"print_all_headers!(tables)\n\nPrints the headers (column names) of all tables in the given collection of tables.\n\nArguments\n\ntables: A collection of tables. Each table should be iterable and have a names function that returns its column names.\n\nBehavior\n\nIterates through each table in the collection.\nPrints the name of the table (key) in bold red text.\nPrints the column names of the table.\nIf an error occurs while processing a table, it catches the exception and prints a message indicating the table was skipped.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.print_properties-Tuple{}","page":"Autodocs","title":"SciGlassDatabase.print_properties","text":"print_properties()\n\nPrint property names from the list_properties.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.print_property_data-Tuple{}","page":"Autodocs","title":"SciGlassDatabase.print_property_data","text":"print_property_data()\n\nPrint property names and their corresponding field names from the PROPERTY.LISTPROP table.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.reload_table!-Tuple{Any, Any}","page":"Autodocs","title":"SciGlassDatabase.reload_table!","text":"reload_table!(tables, item::Union{Symbol, String})\n\nReload the table field with DataFrame from filepath. Skip loading if DataFrame already exists, use reload_table! for force reloading of table.\n\nArguments\n\ntables: A collection of tables. Each table should be iterable and have a names function that returns its column names.\nitem: The name of the table to load. It can be a Symbol or String.\n\nExample\n\nreload_table!(SELECT, \"AtMol\")\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.save_table-Tuple{Any, Any}","page":"Autodocs","title":"SciGlassDatabase.save_table","text":"save_table(filepath, df)\n\nSaves a DataFrame to a CSV file at the specified filepath.\n\nArguments\n\nfilepath: A String specifying the path where the CSV file will be saved.\ndf: A DataFrame object to be saved.\n\nDescription\n\nThis function writes the contents of the DataFrame to a CSV file using the CSV.write function.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.scatterTernary-Tuple{Any}","page":"Autodocs","title":"SciGlassDatabase.scatterTernary","text":"scatterTernary(composition; property=\"DENSITY\", kwargs...)\n\nGenerates a scatter plot on a ternary diagram based on the given composition and property.\n\nArguments\n\ncomposition: The composition data to be plotted. This should be a data structure compatible with the get_compositions function.\nproperty: A string specifying the property to be visualized. Defaults to \"DENSITY\". The property name is automatically converted to uppercase.\nkwargs...: Additional keyword arguments passed to the get_compositions function.\n\nReturns\n\nA scatter plot object if the composition data contains entries; otherwise, no plot is generated.\n\nDetails\n\nThe function retrieves the composition data and the specified property using the get_compositions function.\nThe ternary composition data is converted to Cartesian coordinates using the tern2cart function.\nA ternary plot is created with axes labeled according to the composition names.\nThe scatter plot is colored based on the values of the specified property, with a colorbar included for reference.\n\nNotes\n\nThe function assumes that the input composition data contains at least three components for ternary plotting.\nIf the composition data is empty, no scatter plot is generated.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.scatterplot_table-Tuple{Any, Any, Any}","page":"Autodocs","title":"SciGlassDatabase.scatterplot_table","text":"scatterplot_table(df, x, y)\n\nGenerates a scatter plot from the given DataFrame df using the specified columns x and y.\n\nArguments\n\ndf::DataFrame: The input DataFrame containing the data to be plotted.\nx::Symbol: The column name in the DataFrame to be used for the x-axis.\ny::Symbol: The column name in the DataFrame to be used for the y-axis.\n\nBehavior\n\nConverts the column names x and y to uppercase before plotting.\nCreates a scatter plot with no legend label.\nSets the x-axis and y-axis labels to the uppercase string representation of the column names.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.separate_columns-Tuple{Any, Any}","page":"Autodocs","title":"SciGlassDatabase.separate_columns","text":"separate_columns(comps, compositions)\n\nConvert composition from string representation to DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.set_table_field!-Tuple{Any, Symbol, DataFrames.DataFrame}","page":"Autodocs","title":"SciGlassDatabase.set_table_field!","text":"set_table_field!(a, item::Symbol, filepath::DataFrame)\n\nSet table field with DataFrame from filepath. Skip loading if DataFrame already exists, use reload_table! for force reloading of table.\n\nArguments\n\na: A collection of tables. Each table should be iterable and have a names function that returns its column names.\nitem: The name of the table to load. It can be a Symbol or String.\nfilepath: The path to the file containing the table data. It can be a String or DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.set_table_field!-Tuple{Any, Symbol, String}","page":"Autodocs","title":"SciGlassDatabase.set_table_field!","text":"set_table_field!(a, item::Symbol, filepath::String)\n\nSet table field with DataFrame from filepath. Skip loading if DataFrame already exists, use reload_table! for force reloading of table.\n\nArguments\n\na: A collection of tables. Each table should be iterable and have a names function that returns its column names.\nitem: The name of the table to load. It can be a Symbol or String.\nfilepath: The path to the file containing the table data. It can be a String or DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.show_table-Tuple{Any}","page":"Autodocs","title":"SciGlassDatabase.show_table","text":"show_table(df; title=\"Table\", with_plot=false)\n\nDisplays a table using Dash and optionally includes an interactive plot.\n\nArguments\n\ndf::DataFrame: The data to be displayed in the table.\ntitle::String: The title of the table. Defaults to \"Table\".\nwith_plot::Bool: If true, includes an interactive plot feature. Defaults to false.\n\nDescription\n\nThis function creates a Dash application to display a table. If with_plot is set to true, it also provides an interactive scatter plot feature using PlotlyJS. Users can select the columns for the x and y axes of the plot through dropdown menus.\n\nInteractive Plot\n\nWhen with_plot is enabled:\n\nDropdown menus allow users to select columns for the x and y axes.\nA scatter plot is generated dynamically based on the selected columns.\nThe plot is displayed alongside the table.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#SciGlassDatabase.table_layout!-Tuple{Any, Any}","page":"Autodocs","title":"SciGlassDatabase.table_layout!","text":"table_layout!(app, df; title=\"Table\", with_plot=false)\n\nSets up the layout for the Dash application.\n\nArguments\n\napp: The Dash application instance.\ndf: A DataFrame object to be displayed in the table.\ntitle: A String specifying the title of the table. Defaults to \"Table\".\nwith_plot: A Boolean indicating whether to include a plot in the layout. Defaults to false.\n\nDescription\n\nThis function defines the layout of the Dash application, including the table, optional plot, and dropdowns for selecting x and y axes for the plot.\n\n\n\n\n\n","category":"method"}]
}
